package telegram

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/forPelevin/gomoji"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gorm.io/gorm"
	"log"
	"regexp"
	"strconv"
	"strings"
	"telegram_bot/pkg/telegram/models"
)

// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
var requestButtons = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–π–Ω—è—Ç–∏", "accept_request"),
		tgbotapi.NewInlineKeyboardButtonData("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", "reject_request"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –æ—Ä–∫–∞", "fuck_off_dog"),
	),
)

// –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
var stopUploadPhotoButton = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ì–æ—Ç–æ–≤–æüëå", "upload_done"),
	),
)

// handleCallback –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±–µ–∫–æ–≤
func (b *Bot) handleCallback(callbackQuery *tgbotapi.CallbackQuery) {
	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±–µ–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if callbackQuery.Message.Chat.ID == b.adminChatID {
		// —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∏—Å—è—Ç –∫–Ω–æ–ø–∫–∏ (—Å–∞–º–∞ –∑–∞—è–≤–∫–∞ –∞–¥–º–∏–Ω–∞) –Ω–∞ –º–∞—Å—Å–∏–≤
		s := strings.Fields(callbackQuery.Message.Text)
		// –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç chat_id (string)
		strUserID := s[len(s)-1]

		// todo –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ chat_id
		// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ –∏ –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π `chat_id` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É
		userChatID, _ := strconv.ParseInt(strUserID, 10, 64)

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–¥ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–æ –≤ –∑–∞—è–≤–∫–µ
		user, err := b.userRepo.Get(userChatID)
		if err != nil {
			log.Panic("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", err)
		}
		// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
		adminMsg := tgbotapi.NewMessage(b.adminChatID, "")

		switch user.Status {
		case models.UserStatuses.Accepted:
			adminMsg.Text = fmt.Sprintf(
				"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏–π! \n –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: %d - <b>%s</b>.",
				userChatID, b.statuses[models.UserStatuses.Accepted])
			adminMsg.ParseMode = parseModeHTMl
			b.bot.Send(adminMsg)

			return
		case models.UserStatuses.Rejected:
			adminMsg.Text = fmt.Sprintf(
				"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏–π! \n –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: %d - <b>%s</b>.",
				userChatID, b.statuses[models.UserStatuses.Rejected])
			adminMsg.ParseMode = parseModeHTMl
			b.bot.Send(adminMsg)

			return
		case models.UserStatuses.Banned:
			adminMsg.Text = fmt.Sprintf(
				"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏–π! \n –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: %d - <b>%s</b>.",
				userChatID, b.statuses[models.UserStatuses.Banned])
			adminMsg.ParseMode = parseModeHTMl
			b.bot.Send(adminMsg)

			return
		case models.UserStatuses.Waiting:
			userMsg := tgbotapi.NewMessage(userChatID, "")
			// todo –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤—ã—à–µ —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∞
			adminMsg = tgbotapi.NewMessage(b.adminChatID, "")

			// –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –∑–∞—è–≤–∫–µ
			switch callbackQuery.Data {
			case callbackAccept:
				// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
				inviteLinkConfig := tgbotapi.CreateChatInviteLinkConfig{
					ChatConfig: tgbotapi.ChatConfig{
						ChatID: b.closedGroupID,
					},
					Name:               "–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É",
					ExpireDate:         0,
					MemberLimit:        1,
					CreatesJoinRequest: false,
				}

				// todo –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É
				resp, _ := b.bot.Request(inviteLinkConfig)
				// –°–æ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—ã—Ä—ã—Ö –±–∞–π—Ç —Å –æ—Ç–≤–µ—Ç–∞
				data := []byte(resp.Result)
				// –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–∏–ø–∞ ChatInviteLink –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –µ–≥–æ –æ—Ç–≤–µ—Ç–æ–º
				var chatInviteLink tgbotapi.ChatInviteLink
				// –†–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤—ã—à–µ —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–∏–ø–∞ ChatInviteLink
				_ = json.Unmarshal(data, &chatInviteLink)

				// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				userMsg.Text = b.messages.UserResponses.InviteMsg
				userMsg.ParseMode = parseModeHTMl
				b.bot.Send(userMsg)

				// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				userMsg.Text = fmt.Sprintf("–û—Å—å –≤–∞—à–µ <a href=\"%s\">%s</a>", chatInviteLink.InviteLink, chatInviteLink.Name)
				userMsg.ParseMode = parseModeHTMl
				b.bot.Send(userMsg)

				// todo –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–Ω—è—Ç—å –≤ –≥—Ä—É–ø–ø—É)
				user.Status = models.UserStatuses.Accepted
				b.userRepo.Update(user)

				// –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
				adminMsg.Text = fmt.Sprintf("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ <b>ChatID: %d</b> –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—Å—Ç—É–ø –¥–æ –≥—Ä—É–ø–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", userChatID)
				adminMsg.ParseMode = parseModeHTMl
				b.bot.Send(adminMsg)
			case callbackReject:
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user.Status = models.UserStatuses.Rejected
				b.userRepo.Update(user)

				// –û—Ç—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				userMsg.Text = b.messages.UserResponses.RejectMsg
				userMsg.ParseMode = parseModeHTMl
				b.bot.Send(userMsg)

				// todo –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
				adminMsg.Text = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π!"
				b.bot.Send(adminMsg)
			case callbackBanned:
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user.Status = models.UserStatuses.Banned
				b.userRepo.Update(user)

				// –û—Ç—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				userMsg.Text = b.messages.UserResponses.BannedMsg
				userMsg.ParseMode = parseModeHTMl
				b.bot.Send(userMsg)

				// todo –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
				// todo –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤—ã—à–µ —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∞
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
				adminMsg.Text = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–Ω–∏–π!"
				b.bot.Send(adminMsg)
			}
		}
	} else {
		switch callbackQuery.Data {
		case "upload_done":
			// –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∑–∞—è–≤–∫—É
			// todo –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
			// todo –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏

			chatID := callbackQuery.Message.Chat.ID

			user, _ := b.userRepo.Get(chatID)

			if user.State == models.UserStates.Completed {
				answerCallback := tgbotapi.NewCallback(callbackQuery.ID, "–ó–∞—è–≤–∫—É –≤–∂–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
				if _, err := b.bot.Request(answerCallback); err != nil {
					panic(err)
				}

				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
			adminMsgText := fmt.Sprintf(
				"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–∞–Ω–Ω—ã–µ:\n\n"+
					"–ò–º—è: %s\n"+
					"–ì–æ—Ä–æ–¥: %s\n"+
					"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: %s\n"+
					"–î–≤–∏–≥–∞—Ç–µ–ª—å: %s\n"+
					"ChatID: %d",
				user.Name,
				user.City,
				user.Car,
				user.Engine,
				user.ChatID)

			// –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
			adminMsg := tgbotapi.NewMessage(b.adminChatID, adminMsgText)
			adminMsg.ReplyMarkup = requestButtons
			rq, _ := b.bot.Send(adminMsg)

			mgc := createMediaGroup(user, chatID, b.adminChatID)
			mgc.ReplyToMessageID = rq.MessageID
			if _, err := b.bot.SendMediaGroup(mgc); err != nil {
				log.Panic(err)
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			msg := tgbotapi.NewMessage(chatID, b.messages.UserResponses.DoneRequestMsg)
			b.bot.Send(msg)

			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			user.State = models.UserStates.Completed
			user.Status = models.UserStatuses.Waiting
			b.userRepo.Update(user)

			// –£–¥–∞–ª—è–µ–º MessageID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É
			delete(b.lastMessageID, chatID)

			return
		default:
			// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
			return
		}
	}

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–ª–±–µ–∫–∞
	answerCallback := tgbotapi.NewCallback(callbackQuery.ID, "–ó—Ä–æ–±–ª–µ–Ω–æ :)")
	if _, err := b.bot.Request(answerCallback); err != nil {
		panic(err)
	}
}

// handleCommands –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
func (b *Bot) handleCommands(message *tgbotapi.Message) {
	switch message.Command() {
	case "start":
		msg := tgbotapi.NewMessage(message.Chat.ID, "Hello, I'm your bot!")
		b.bot.Send(msg)
	default:
		msg := tgbotapi.NewMessage(message.Chat.ID, "I don't know that command")
		b.bot.Send(msg)
	}
}

// handleMessage –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	// ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	chatID := message.Chat.ID

	// todo —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã
	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –≥—Ä—É–ø–ø—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
	if chatID == b.closedGroupID {
		b.handleMessageFromGroup(message)
	}

	user, err := b.userRepo.Get(chatID)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			user = b.userRepo.Create(chatID)
		} else {
			log.Fatalln("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.", err)
		}
	}

	userReplyMsg := tgbotapi.NewMessage(chatID, "")
	userReplyMsg.ParseMode = parseModeHTMl

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	switch user.Status {
	case models.UserStatuses.Accepted:
		userReplyMsg.Text = b.messages.UserResponses.AlreadyDoneMsg
		b.bot.Send(userReplyMsg)

		return
	case models.UserStatuses.Rejected:
		userReplyMsg.Text = b.messages.UserResponses.RejectMsg
		b.bot.Send(userReplyMsg)

		return
	case models.UserStatuses.Banned:
		userReplyMsg.Text = b.messages.UserResponses.BannedMsg
		b.bot.Send(userReplyMsg)

		return
	case models.UserStatuses.Waiting:
		userReplyMsg.Text = b.messages.UserResponses.WaitingMsg
		b.bot.Send(userReplyMsg)

		return
	case models.UserStatuses.New:
		// –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç emoji
		message.Text = gomoji.RemoveEmojis(message.Text)

		// –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç emoji —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º, –ø—Ä–æ—Å–∏–º –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ñ–æ—Ç–æ
		// todo –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
		if message.Text == "" && user.State != models.UserStates.Photo {
			userReplyMsg.Text = b.messages.UserResponses.ReplyPlease
			b.bot.Send(userReplyMsg)

			return
		}

		// todo –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å–ª–∏ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É
		switch user.State {
		case models.UserStates.Initial:
			// todo –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			userReplyMsg.Text = b.messages.UserResponses.WelcomeMsg
			b.bot.Send(userReplyMsg)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
			userReplyMsg.Text = b.messages.Questions.UserName
			b.bot.Send(userReplyMsg)
			// –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
			user.State = models.UserStates.Name
			b.userRepo.Update(user)

			return
		case models.UserStates.Name:
			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			user.Name = message.Text
			user.State = models.UserStates.City
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			b.userRepo.Update(user)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			userReplyMsg.Text = b.messages.Questions.UserCity
			b.bot.Send(userReplyMsg)

			return
		case models.UserStates.City:
			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			user.City = message.Text
			user.State = models.UserStates.Car
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			b.userRepo.Update(user)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
			userReplyMsg.Text = b.messages.Questions.UserCar
			b.bot.Send(userReplyMsg)

			return
		case models.UserStates.Car:
			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			user.Car = message.Text
			user.State = models.UserStates.Engine
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			b.userRepo.Update(user)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
			userReplyMsg.Text = b.messages.Questions.UserEngine
			b.bot.Send(userReplyMsg)

			return
		case models.UserStates.Engine:
			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			user.Engine = message.Text
			user.State = models.UserStates.Photo
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			b.userRepo.Update(user)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
			userReplyMsg.Text = b.messages.Questions.UserPhoto
			b.bot.Send(userReplyMsg)

			return
		case models.UserStates.Photo:
			if message.Photo != nil && len(message.Photo) > 0 {
				// todo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≥–æ—Ç–æ–≤–æ –µ—Å–ª–∏ –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ –±–æ–ª—å—à–æ–µ –∏–Ω–æ–≥–¥–∞
				b.handlePhoto(message, user)
			} else {
				// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–æ—Ç—Ä–∏–º –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–æ—Ç–æ
				// –ï—Å–ª–∏ –µ—Å—Ç—å, –ø—Ä–æ—Å–∏–º –Ω–∞–∂–∞—Ç—å –≥–æ—Ç–æ–≤–æ, –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë
				if len(user.Photos) > 0 {
					// todo –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º
					// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
					delM := tgbotapi.NewDeleteMessage(message.Chat.ID, b.lastMessageID[message.Chat.ID])
					b.bot.Send(delM)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
					txt := fmt.Sprintf("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ %d —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ì–æ—Ç–æ–≤–æ\".", len(user.Photos))
					m := tgbotapi.NewMessage(message.Chat.ID, txt)
					m.ReplyMarkup = &stopUploadPhotoButton
					newMsg, _ := b.bot.Send(m)

					// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ò–î —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–≥–æ—Ç–æ–≤–æ"
					b.lastMessageID[message.Chat.ID] = newMsg.MessageID
					return
				}
				// –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—â—ë –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
				msg := tgbotapi.NewMessage(message.Chat.ID, b.messages.Questions.UserPhoto)
				b.bot.Send(msg)

				return
			}
		}
	}
}

// handlePhoto –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
func (b *Bot) handlePhoto(message *tgbotapi.Message, user *models.User) {
	// ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	chatID := message.Chat.ID
	// ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	messageID := message.MessageID
	// –ø–æ–ª—É—á–∞–µ–º fileID —Ñ–æ—Ç–æ —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
	photoID := (message.Photo)[len(message.Photo)-1].FileID

	if len(user.Photos) < maxUploadPhoto {
		// –î–æ–±–∞–≤–ª—è–µ–º fileID –≤ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user.Photos = append(user.Photos, photoID)
		// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
		b.userRepo.Update(user)
	} else {
		rdDots := getRandomDots()
		txt := fmt.Sprintf("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ %d —Ñ–æ—Ç–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ì–æ—Ç–æ–≤–æ\"%s", len(user.Photos), rdDots)
		m := tgbotapi.NewEditMessageText(chatID, b.lastMessageID[chatID], txt)
		m.ReplyMarkup = &stopUploadPhotoButton

		newMessage, err := b.bot.Send(m)
		if err == nil {
			b.lastMessageID[chatID] = newMessage.MessageID
			return
		}
	}

	// —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
	txt := fmt.Sprintf("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ %d —Ñ–æ—Ç–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ì–æ—Ç–æ–≤–æ\".", len(user.Photos))

	if b.lastMessageID[chatID] != 0 && messageID < b.lastMessageID[chatID] {
		m := tgbotapi.NewEditMessageText(chatID, b.lastMessageID[chatID], txt)
		m.ReplyMarkup = &stopUploadPhotoButton

		newMessage, err := b.bot.Send(m)
		if err == nil {
			b.lastMessageID[chatID] = newMessage.MessageID

			return
		}
	} else if b.lastMessageID[chatID] != 0 && messageID > b.lastMessageID[chatID] {
		m := tgbotapi.NewDeleteMessage(chatID, b.lastMessageID[chatID])
		b.bot.Send(m)
	}

	m := tgbotapi.NewMessage(chatID, txt)
	m.ReplyMarkup = &stopUploadPhotoButton

	newMessage, err := b.bot.Send(m)
	if err != nil {
		return
	}

	b.lastMessageID[chatID] = newMessage.MessageID
	return
}

// todo –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
// handleAdminMessage –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func (b *Bot) handleAdminMessage(message *tgbotapi.Message) {
	if message.IsCommand() {
		switch message.Command() {
		case "refresh":
			if message.CommandArguments() != "" {
				match := regexp.MustCompile(`^\d+$`).FindStringSubmatch(message.CommandArguments())
				if len(match) == 0 {
					// –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
					msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–º–∞–Ω–¥–∏ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º.")
					b.bot.Send(msg)

					return
				}
				// –ü–æ–ª—É—á–∞–µ–º ChatID –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
				chatID, _ := strconv.ParseInt(match[0], 10, 64)

				adminMsg := tgbotapi.NewMessage(b.adminChatID, "")
				adminMsg.ParseMode = parseModeHTMl

				// todo —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫, —á—Ç–æ –±—ã –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –∞–¥–º–∏–Ω—É –∏–ª–∏ –º–Ω–µ?
				// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user, err := b.userRepo.Get(chatID)
				if err != nil {
					if errors.Is(err, gorm.ErrRecordNotFound) {
						adminMsg.Text = fmt.Sprintf("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ <b>ID: %d</b> –Ω–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ!", chatID)
					} else {
						adminMsg.Text = "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!"
					}

					b.bot.Send(adminMsg)
					return
				}

				user.State = models.UserStates.Initial
				user.Status = models.UserStatuses.New
				user.Photos = nil
				b.userRepo.Update(user)

				adminMsg.Text = fmt.Sprintf("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ <b>ID: %d</b> –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ", chatID)
				b.bot.Send(adminMsg)

				return
			} else {
				adminMsg := tgbotapi.NewMessage(b.adminChatID, "–í–≤–µ–¥–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫–æ–≥–æ —Ç–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –±–∞–∑–∏.")
				b.bot.Send(adminMsg)

				return
			}
		}
	} else {
		adminMsg := tgbotapi.NewMessage(b.adminChatID, "–ü—Ä–∏–≤—ñ—Ç –ê–¥–º—ñ–Ω.\n–Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:\n/refresh + ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
		b.bot.Send(adminMsg)

		return
	}
}

// handleMessageFromGroup –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã
func (b *Bot) handleMessageFromGroup(message *tgbotapi.Message) {
	if message.NewChatMembers != nil {
		for _, newMember := range message.NewChatMembers {
			var replyName string
			switch {
			case newMember.UserName != "":
				replyName = newMember.UserName
				break
			case newMember.FirstName != "" && newMember.FirstName != "„Ö§":
				// –ò–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å —Å–∏–º–≤–æ–ª–æ–º –ø—É—Å—Ç–æ—Ç—ã ;)
				replyName = newMember.FirstName
				break
			case newMember.LastName != "":
				replyName = newMember.LastName
				break
			default:
				replyName = "–í–æ–¥—ñ–π BMW:\\)"
			}

			// todo –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ø–æ–¥ ParseMode=HTML, —á—Ç–æ –±—ã –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
			mention := fmt.Sprintf("[%v](tg://user?id=%v)", escapeString(replyName), strconv.FormatInt(newMember.ID, 10))
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf(b.messages.GroupWelcomeMsg, mention))
			msg.ParseMode = "MarkdownV2"
			b.bot.Send(msg)

			return
		}
	} else if message.LeftChatMember != nil {
		// todo —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É
		return
	}

	// todo –≤–æ–∑–º–æ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
	return
}
