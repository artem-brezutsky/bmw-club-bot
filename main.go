package main

import (
	"encoding/json"
	"github.com/forPelevin/gomoji"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"log"
	"os"
	"strconv"
	"strings"
)

const StatusAccepted = 3
const StatusDeclined = 4
const StatusWaiting = 5
const StatusBanned = 7

// todo –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≥–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ, —á—Ç–æ –±—ã —Ç–µ–∫—Å—Ç –±—ã–ª —Ç–µ–∫—Å—Ç–æ–º, –Ω–µ —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏!!! –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥
// todo –°–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –∑–∞—è–≤–∫–∏

// Request –°—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type Request struct {
	Id     int
	ChatId int64
	Status int
	Step   int
}

func main() {
	if err := godotenv.Load(); err != nil {
		log.Print("No .env file found")
	}

	Token := os.Getenv("TOKEN")
	OwnerAcc, _ := strconv.ParseInt(os.Getenv("OWNER_ACC"), 10, 64)
	//SupergroupId, _ := strconv.ParseInt(os.Getenv("SUPERGROUP_ID"), 10, 64)
	SupergroupF30Id, _ := strconv.ParseInt(os.Getenv("SUPERGROUP_F30_ID"), 10, 64)

	bot, err := tgbotapi.NewBotAPI(Token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	// todo –í—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
	dsn := "admin:root@tcp(127.0.0.1:3306)/bmw_club_bot"
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	// –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
	var (
		answer1 = ""
		answer2 = ""
		answer3 = ""
	)

	var (
		question1 = "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
		question2 = "–ö–∞–∫–æ–µ —É —Ç–µ–±—è –∞–≤—Ç–æ?"
		question3 = "–ö–∞–∫–æ–π –¥–≤–∏–≥–∞—Ç–µ–ª—å?"
	)

	var doneButton = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ì–æ—Ç–æ–≤–æüëå"),
		),
	)

	var requestButtons = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "accept_request"),
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", "reject_request"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ—Å–ª–∞—Ç—å –Ω–∞—Ö—É–π –ø—Å–∞", "fuck_off_dog"),
		),
	)

	// –ú–∞—Å—Å–∏–≤ –ò–î —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	var answerFileIds []string = nil
	var isDocumentFiles = false
	var isPhotoFiles = false

	for update := range updates {

		fromChat := update.FromChat()
		if fromChat.ID == SupergroupF30Id {
			continue
		}

		if update.Message != nil { // If we got a message

			// –ò–¥ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
			chatID := update.Message.Chat.ID
			msg := tgbotapi.NewMessage(chatID, "")

			var userRequest Request

			// @todo —Ç–µ—Å—Ç–∏—Ä—É–µ–º
			//if update.Message.From.ID == 123 {
			//msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
			//
			//switch update.Message.Text {
			//case "open":
			//	msg.ReplyMarkup = but
			//case "close":
			//	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
			//}
			//
			//if _, err := bot.Send(msg); err != nil {
			//	log.Panic(err)
			//}
			//
			//continue
			// –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
			//if update.Message.Photo != nil {
			//	//msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
			//	answerFileIds = append(answerFileIds, update.Message.Photo[1].FileID)
			//	msg.ReplyMarkup = doneButton
			//	if _, err := bot.Send(msg); err != nil {
			//		log.Panic(err)
			//	}
			//} else if update.Message.Document != nil &&
			//	strings.Contains(update.Message.Document.MimeType, "image") {
			//	//msg := tgbotapi.NewDocument(OwnerAcc, tgbotapi.FileID(update.Message.Document.FileID))
			//	answerFileIds = append(answerFileIds, update.Message.Document.FileID)
			//	msg.ReplyMarkup = doneButton
			//	if _, err := bot.Send(msg); err != nil {
			//		log.Panic(err)
			//	}
			//}

			//if update.Message.Text == "–ì–æ—Ç–æ–≤–æüëå" {
			//	msg := tgbotapi.NewMessage(OwnerAcc, "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
			//	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
			//	if _, err := bot.Send(msg); err != nil {
			//		log.Panic(err)
			//	}
			//	log.Println("–ì–æ—Ç–æ–≤–æüëå")
			//	// –ì–æ—Ç–æ–≤–æüëå
			//	continue
			//}

			//msg := tgbotapi.NewMessage(OwnerAcc, update.Message.Text)
			//bot.Send(msg)
			//continue
			//handleOwnerMessage(update)
			//if update.Message.ReplyToMessage != nil {
			//	var replyUserRequest Request
			//	replyUserRequest, err = getUserRequestForMessageId(*db, update.Message.ReplyToMessage.MessageID)
			//	if err != nil {
			//		log.Fatal(err.Error())
			//	}
			//	//replyUser := db.Where("message_id = ?", update.Message.ReplyToMessage.MessageID).First(&userRequest)
			//	msg := tgbotapi.NewMessage(replyUserRequest.ChatId, update.Message.Text)
			//	bot.Send(msg)
			//	continue
			//}
			//ownerGreeting := "Hello My Kid!"
			//msg := tgbotapi.NewMessage(OwnerAcc, ownerGreeting)
			//msg.ReplyToMessageID = update.Message.MessageID
			//
			//bot.Send(msg)
			//continue
			//}

			if update.Message.From.ID == OwnerAcc {

				// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
				inviteLinkConfig := tgbotapi.CreateChatInviteLinkConfig{
					ChatConfig: tgbotapi.ChatConfig{
						ChatID: SupergroupF30Id,
					},
					Name:               "",
					ExpireDate:         0,
					MemberLimit:        1,
					CreatesJoinRequest: false,
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É
				resp, _ := bot.Request(inviteLinkConfig)
				// –°–æ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—ã—Ä—ã—Ö –±–∞–π—Ç —Å –æ—Ç–≤–µ—Ç–∞
				data := []byte(resp.Result)
				// –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–∏–ø–∞ ChatInviteLink –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –µ–≥–æ –æ—Ç–≤–µ—Ç–æ–º
				var inviteLink2 tgbotapi.ChatInviteLink
				// –†–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤—ã—à–µ —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–∏–ø–∞ ChatInviteLink
				_ = json.Unmarshal(data, &inviteLink2)

				log.Println(inviteLink2.InviteLink)
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
			result := db.Where("chat_id = ?", chatID).First(&userRequest)
			if result.RowsAffected > 0 { // –ï—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î?
				// –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
				switch userRequest.Status {
				case StatusAccepted:
					// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
					msg.Text = "–í—ã —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã!"
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
					log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç: [%d]", userRequest.ChatId)
					continue
				case StatusDeclined:
					// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω
					msg.Text = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!"
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
					log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω: [%d]", userRequest.ChatId)
					continue
				case StatusWaiting:
					msg.Text = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏!"
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
					continue
				}

				log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: [%d]", userRequest.ChatId)
			} else {
				// –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				userRequest = Request{ChatId: chatID}
				db.Create(&userRequest)
				log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: [%d]", userRequest.ChatId)
				// todo –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
			}

			switch userRequest.Step {
			case 0:
				log.Println("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥...")
				msg.Text = "–ü—Ä–∏–≤–µ—Ç, —Å–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤."
				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}

				msg.Text = question1
				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}

				userRequest.Step = userRequest.Step + 1
				db.Save(&userRequest)
				continue
			case 1:
				// todo –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥.
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ emoji
				update.Message.Text = gomoji.RemoveEmojis(update.Message.Text)
				if update.Message.Text == "" {
					msg.Text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ!"
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
					msg.Text = question1
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
					continue
				}
				answer1 = update.Message.Text
				msg.Text = question2
				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}
				userRequest.Step = userRequest.Step + 1
				db.Save(&userRequest)
				continue
			case 2:
				// todo –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥.
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ emoji
				update.Message.Text = gomoji.RemoveEmojis(update.Message.Text)
				if update.Message.Text == "" {
					msg.Text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ!"
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
					msg.Text = question2
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
					continue
				}
				answer2 = update.Message.Text
				msg.Text = question3
				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}
				userRequest.Step = userRequest.Step + 1
				db.Save(&userRequest)
				continue
			case 3:
				// todo –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥.
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ emoji
				update.Message.Text = gomoji.RemoveEmojis(update.Message.Text)
				if update.Message.Text == "" {
					msg.Text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ!"
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
					msg.Text = question3
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
					continue
				}
				answer3 = update.Message.Text
				msg.Text = "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ\""
				msg.ReplyMarkup = doneButton
				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}
				userRequest.Step = userRequest.Step + 1
				db.Save(&userRequest)
				continue
			case 4:
				if update.Message.Photo != nil {
					answerFileIds = append(answerFileIds, update.Message.Photo[1].FileID)
					isPhotoFiles = true
					isDocumentFiles = false
					continue
				} else if update.Message.Document != nil &&
					strings.Contains(update.Message.Document.MimeType, "image") {
					answerFileIds = append(answerFileIds, update.Message.Document.FileID)
					isDocumentFiles = true
					isPhotoFiles = false
					continue
				}

				if update.Message.Text == "–ì–æ—Ç–æ–≤–æüëå" {
					if answerFileIds == nil {
						msg.Text = "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ\""
						msg.ReplyMarkup = doneButton
						if _, err := bot.Send(msg); err != nil {
							log.Panic(err)
						}
						continue
					}
					msg.Text = "–°–ø–∞—Å–∏–±–æ, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"
					msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}

					// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
					userRequest.Step = 5
					userRequest.Status = StatusWaiting
					db.Save(&userRequest)
					// –ì–æ—Ç–æ–≤–æüëå

					// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É
					totalAnswer := "–ò–º—è: " + answer1 + " \n"
					totalAnswer += "–ê–≤—Ç–æ–º–æ–±–∏–ª—å: " + answer2 + " \n"
					totalAnswer += "–î–≤–∏–≥–∞—Ç–µ–ª—å: " + answer3 + " \n"
					totalAnswer += "ChatID: " + strconv.FormatInt(chatID, 10) + " \n"

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
					// todo —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å
					msg := tgbotapi.NewMessage(OwnerAcc, totalAnswer)
					msg.ReplyMarkup = requestButtons
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}

					files := make([]interface{}, len(answerFileIds))
					for i, s := range answerFileIds {
						if isPhotoFiles {
							files[i] = tgbotapi.NewInputMediaPhoto(tgbotapi.FileID(s))
							continue
						}

						if isDocumentFiles {
							files[i] = tgbotapi.NewInputMediaDocument(tgbotapi.FileID(s))
							continue
						}
					}
					cfg := tgbotapi.NewMediaGroup(
						OwnerAcc,
						files,
					)

					if _, err := bot.SendMediaGroup(cfg); err != nil {
						log.Panic(err)
					}

					// todo –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ —á–∏—Å—Ç–∏—Ç—å –º–∞—Å—Å–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏? –ï—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç? –ú–∞—Å—Å–∏–≤ –Ω–µ –æ—á–∏—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
					answerFileIds = nil
					continue
				} else {
					msg.Text = "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ\""
					msg.ReplyMarkup = doneButton
					if _, err := bot.Send(msg); err != nil {
						log.Panic(err)
					}
					continue
				}
			}

			//if userRequest.Step == 0 {
			//
			//} else if userRequest.Step == 1 {
			//
			//} else if userRequest.Step == 2 {
			//
			//} else if userRequest.Step == 3 {
			//
			//} else if userRequest.Step == 4 {
			//
			//}

			//continue
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥–∞ –ª–∏ —ç—Ç–æ?
			//if update.Message.IsCommand() {
			//
			//	msg := tgbotapi.NewMessage(chatID, "")
			//
			//	switch update.Message.Command() {
			//	case "start":
			//
			//	default:
			//		msg.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
			//		if _, err := bot.Send(msg); err != nil {
			//			log.Panic(err)
			//		}
			//		continue
			//	}
			//
			//	// –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∏–ª–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
			//	// todo –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
			//	log.Println("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start!")
			//	log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
			//} else {
			//	// –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			//	msg := tgbotapi.NewMessage(chatID, "")
			//	result := db.Where("chat_id = ?", chatID).First(&userRequest)
			//	if result.RowsAffected > 0 { // –ï—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î?
			//		// –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
			//		switch userRequest.Status {
			//		case StatusAccepted:
			//			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
			//			msg.Text = "–í—ã —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã!"
			//			if _, err := bot.Send(msg); err != nil {
			//				log.Panic(err)
			//			}
			//			continue
			//		case StatusDeclined:
			//			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω
			//			msg.Text = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!"
			//			if _, err := bot.Send(msg); err != nil {
			//				log.Panic(err)
			//			}
			//			continue
			//		}
			//
			//	} else {
			//		// –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			//		userRequest = Request{ChatId: chatID}
			//		db.Create(&userRequest)
			//		// todo –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
			//	}
			//}

			// –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ
			//db.Clauses(clause.OnConflict{
			//	Columns:   []clause.Column{{Name: "chat_id"}},
			//	DoUpdates: clause.AssignmentColumns([]string{"message_id"}),
			//}).Create(&userRequest)

			// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			// –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
			//if update.Message.IsCommand() {
			//	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
			//
			//	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
			//
			//	switch update.Message.Command() {
			//	case "start":
			//
			//		// –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
			//		msg.Text = "–ü—Ä–∏–≤—ñ—Ç! –ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞? –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º - –≤–∫–∞–∂–∏ –≤–ª–∞—Å–Ω–µ —ñ–º'—è?"
			//	default:
			//		msg.Text = "I don't know that command"
			//	}
			//
			//	if _, err := bot.Send(msg); err != nil {
			//		log.Panic(err)
			//	}
			//	//handleCommand(update)
			//
			//	continue
			//}

			//if update.Message.From.ID == OwnerAcc {
			//	//handleOwnerMessage(update)
			//	if update.Message.ReplyToMessage != nil {
			//		var replyUserRequest Request
			//		replyUserRequest, err = getUserRequestForMessageId(*db, update.Message.ReplyToMessage.MessageID)
			//		if err != nil {
			//			log.Fatal(err.Error())
			//		}
			//		//replyUser := db.Where("message_id = ?", update.Message.ReplyToMessage.MessageID).First(&userRequest)
			//		msg := tgbotapi.NewMessage(replyUserRequest.ChatId, update.Message.Text)
			//		bot.Send(msg)
			//		continue
			//	}
			//	ownerGreeting := "Hello My Kid!"
			//	msg := tgbotapi.NewMessage(OwnerAcc, ownerGreeting)
			//	//msg.ReplyToMessageID = update.Message.MessageID
			//
			//	bot.Send(msg)
			//	continue
			//}

			//msg = tgbotapi.NewForward(OwnerAcc, update.Message.From.ID, update.Message.MessageID)
			//msg.ReplyToMessageID = update.Message.MessageID
		} else if update.CallbackQuery != nil {
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, update.CallbackQuery.Data)

			// —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∏—Å—è—Ç –∫–Ω–æ–ø–∫–∏ (—Å–∞–º–∞ –∑–∞—è–≤–∫–∞ –∞–¥–º–∏–Ω–∞) –Ω–∞ –º–∞—Å—Å–∏–≤
			s := strings.Fields(update.CallbackQuery.Message.Text)
			// –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç chat_id (string)
			strChatID := s[len(s)-1]
			// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º string to int64
			requestUserChatID, err := strconv.ParseInt(strChatID, 10, 64)
			if err != nil {
				panic(err)
			}

			// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—è–≤–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º
			var user Request
			result := db.Where("chat_id = ?", requestUserChatID).First(&user)
			if result.Error != nil {
				log.Panic(result.Error.Error())
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª –ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω —É–∂–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –æ—Ç–≤–µ—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
			// todo –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã —á—Ç–æ –±—ã –±—Ä–∞—Ç—å –∏—Ö —Ç–∞–π—Ç–ª—ã
			// todo –≤—ã–Ω–µ—Å—Ç–∏ –≤—Å—ë –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
			if user.Status == StatusAccepted {
				replText := "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω! \n"
				replText += "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ChatID: " +
					strconv.FormatInt(OwnerAcc, 10) + " - –ü—Ä–∏–Ω—è—Ç"

				msg := tgbotapi.NewMessage(OwnerAcc, replText)
				if _, err := bot.Send(msg); err != nil {
					panic(err)
				}

				continue
			} else if user.Status == StatusDeclined {
				replText := "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω! \n"
				replText += "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ChatID: " +
					strconv.FormatInt(OwnerAcc, 10) + " - –û—Ç–∫–ª–æ–Ω—ë–Ω"

				msg := tgbotapi.NewMessage(OwnerAcc, replText)
				if _, err := bot.Send(msg); err != nil {
					panic(err)
				}

				continue
			} else if user.Status == StatusBanned {
				replText := "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω! \n"
				replText += "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ChatID: " +
					strconv.FormatInt(OwnerAcc, 10) + " - –í –±–∞–Ω–µ"

				msg := tgbotapi.NewMessage(OwnerAcc, replText)
				if _, err := bot.Send(msg); err != nil {
					panic(err)
				}

				continue
			}

			// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ fuck_off_dog, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Å—Ç–∞–≤–∏–≤—à–µ–º—É –∑–∞—è–≤–∫—É
			if callback.Text == "fuck_off_dog" {
				// –®–ª—ë–º –ø—Å–∞ –Ω–∞ —Ö—É–π
				msg := tgbotapi.NewMessage(requestUserChatID, "–ò–¥–∏ –Ω–∞ —Ö—É–π, –ø—ë—Å!")
				if _, err := bot.Send(msg); err != nil {
					panic(err)
				}

				// todo –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å, –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π, —á—Ç–æ-—Ç–æ —Ç–∏–ø–∞ "–±–∞–Ω–∞"
				user.Status = StatusBanned
				db.Save(&user)

				// –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
				msg = tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–∞–Ω –Ω–∞ —Ö—É–π!")
				if _, err := bot.Send(msg); err != nil {
					panic(err)
				}
			} else if callback.Text == "accept_request" {

				// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
				inviteLinkConfig := tgbotapi.CreateChatInviteLinkConfig{
					ChatConfig: tgbotapi.ChatConfig{
						ChatID: SupergroupF30Id,
					},
					Name:               "—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É!",
					ExpireDate:         0,
					MemberLimit:        1,
					CreatesJoinRequest: false,
				}

				// todo –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É
				resp, _ := bot.Request(inviteLinkConfig)
				// –°–æ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—ã—Ä—ã—Ö –±–∞–π—Ç —Å –æ—Ç–≤–µ—Ç–∞
				data := []byte(resp.Result)
				// –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–∏–ø–∞ ChatInviteLink –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –µ–≥–æ –æ—Ç–≤–µ—Ç–æ–º
				var chatInviteLink tgbotapi.ChatInviteLink
				// –†–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤—ã—à–µ —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–∏–ø–∞ ChatInviteLink
				_ = json.Unmarshal(data, &chatInviteLink)

				// todo –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –¥–ª—è 1 —á–µ–ª–æ–≤–µ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				respText := "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! \n"
				respText += "–í–æ—Ç –≤–∞—à–∞ <a href=\"" + chatInviteLink.InviteLink + "\">" + chatInviteLink.Name + "</a>\n"
				msg := tgbotapi.NewMessage(requestUserChatID, respText)
				msg.ParseMode = "HTML"
				if _, err := bot.Send(msg); err != nil {
					panic(err)
				}

				// todo –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–Ω—è—Ç—å –≤ –≥—Ä—É–ø–ø—É)
				user.Status = StatusAccepted
				db.Save(&user)

				// –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
				// –í–µ—Ä–æ—è—Ç–Ω–æ –Ω—É–∂–Ω–æ —Å—é–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å chat_id, —á—Ç–æ –±—ã –ø–æ–Ω—è—Ç—å –∫–æ–≥–æ –ø—Ä–∏–Ω—è–ª–∏ –≤ –≥—Ä—É–ø–ø—É
				msg = tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
				if _, err := bot.Send(msg); err != nil {
					panic(err)
				}
			} else if callback.Text == "reject_request" {

				// todo —á—Ç–æ —Ç–æ –ø—Ä–∏–¥—É–º–∞—Ç—å —Ç—É—Ç
				respText := "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href=\"tg://user?id=6225178130\">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</a>."
				msg := tgbotapi.NewMessage(requestUserChatID, respText)
				msg.ParseMode = "HTML"
				if _, err := bot.Send(msg); err != nil {
					panic(err)
				}

				// todo –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞)
				user.Status = StatusDeclined
				db.Save(&user)

				// –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
				// –í–µ—Ä–æ—è—Ç–Ω–æ –Ω—É–∂–Ω–æ —Å—é–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å chat_id, —á—Ç–æ –±—ã –ø–æ–Ω—è—Ç—å –∫–æ–≥–æ –ø—Ä–∏–Ω—è–ª–∏ –≤ –≥—Ä—É–ø–ø—É
				msg = tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
				if _, err := bot.Send(msg); err != nil {
					panic(err)
				}
			}

			// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–ª–±–µ–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ
			if _, err := bot.Request(callback); err != nil {
				panic(err)
			}

			// And finally, send a message containing the data received.

		}
	}
}
